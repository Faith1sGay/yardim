"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Blob = exports.CycleType = exports.middleware = exports.HttpClient = exports.version = void 0;
const middleware_1 = require("./middleware");
Object.defineProperty(exports, "CycleType", { enumerable: true, get: function () { return middleware_1.CycleType; } });
const HttpClient_1 = __importDefault(require("./HttpClient"));
exports.HttpClient = HttpClient_1.default;
const url_1 = require("url");
const Blob_1 = __importDefault(require("./internals/Blob"));
exports.Blob = Blob_1.default;
const middleware = { compress: middleware_1.compress, logging: middleware_1.logging, forms: middleware_1.forms, streams: middleware_1.streams, blobs: middleware_1.blobs };
exports.middleware = middleware;
for (const method of ['OPTIONS', 'CONNECT', 'DEL', 'TRACE', 'HEAD', 'POST', 'PUT', 'GET']) {
    /**
     * Creates a new Request using the method
     * @param url The URL or options
     * @param opts The options to add
     */
    exports[method.toLowerCase()] = (url, opts) => {
        const client = new HttpClient_1.default();
        if (url instanceof Object && !(url instanceof url_1.URL)) {
            if (url.hasOwnProperty('middleware')) {
                if (Array.isArray(url.middleware)) {
                    for (const middleware of url.middleware)
                        client.use(middleware);
                }
            }
            if (url.hasOwnProperty('url'))
                client.setAgent(url.agent);
        }
        if (opts) {
            if (opts.hasOwnProperty('middleware')) {
                if (Array.isArray(opts.middleware)) {
                    for (const middleware of opts.middleware)
                        client.use(middleware);
                }
            }
            if (opts.hasOwnProperty('url'))
                client.setAgent(opts.agent);
        }
        if (opts && !opts.hasOwnProperty('url'))
            opts.url = url;
        // Not needed
        if (opts)
            delete opts.method;
        const httpMethod = method === 'del' ? 'delete' : method;
        const options = opts !== undefined
            ? opts
            : url instanceof url_1.URL && typeof url === 'string'
                ? { method: httpMethod, url }
                : typeof url === 'object' && !(url instanceof url_1.URL)
                    ? url
                    : { method: httpMethod, url };
        delete options.middleware;
        delete options.agent;
        return client.request(options);
    };
}
exports.version = require('../package.json').version;
