"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const getOption_1 = __importDefault(require("../util/getOption"));
const defaultBinding = (ns, level, message) => {
    const escape = (type) => `0${type}`.slice(-2);
    const date = new Date();
    const l = level.split(' ').map(key => `${key.charAt(0).toUpperCase()}${key.slice(1)}`).join(' ');
    return `[${escape(date.getHours())}:${escape(date.getMinutes())}:${escape(date.getSeconds())}] [${ns}/${process.pid}/${l}] <=> ${message}`;
};
/**
 * Enables logging to track errors, throttle, and attempts
 * @param {LogOptions} options The options to use
 * @returns {Middleware} A middleware function to add to `HttpClient#use`
 */
function logging(options) {
    const useConsole = getOption_1.default('useConsole', true, options);
    const binding = getOption_1.default('binding', defaultBinding, options);
    const caller = getOption_1.default('caller', undefined, options); // eslint-disable-line
    const ns = getOption_1.default('namespace', 'Orchid', options);
    return {
        name: 'logger',
        cycleType: _1.CycleType.None,
        intertwine() {
            const logger = {
                error: (message) => {
                    // This feels bad but I have no idea what to do lol
                    if (useConsole && typeof caller !== 'undefined')
                        throw new Error('You can\'t provide a caller function if you are using console logging');
                    if (!useConsole && typeof caller === 'undefined')
                        throw new Error('You must provide a caller function if you\'re not gonna use console logging');
                    const msg = binding(ns, 'error', message);
                    return useConsole ? console.error(msg) : caller('error', message);
                },
                warn: (message) => {
                    if (useConsole && typeof caller !== 'undefined')
                        throw new Error('You can\'t provide a caller function if you are using console logging');
                    if (!useConsole && typeof caller === 'undefined')
                        throw new Error('You must provide a caller function if you\'re not gonna use console logging');
                    const msg = binding(ns, 'warn', message);
                    return useConsole ? console.warn(msg) : caller('warn', message);
                },
                info: (message) => {
                    if (useConsole && typeof caller !== 'undefined')
                        throw new Error('You can\'t provide a caller function if you are using console logging');
                    if (!useConsole && typeof caller === 'undefined')
                        throw new Error('You must provide a caller function if you\'re not gonna use console logging');
                    const msg = binding(ns, 'info', message);
                    return useConsole ? console.info(msg) : caller('info', message);
                }
            };
            this.middleware.add('logger', logger);
        }
    };
}
exports.default = logging;
