"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
/**
 * Container-based API to get/set middleware
 */
class MiddlewareContainer {
    /**
     * Construct a new instance of the `MiddlewareContainer` class
     */
    constructor() {
        this._container = {};
    }
    /**
     * Gets the selected middleware from the container
     * @param name The name of the container
     * @returns The middleware or `null` if not found
     */
    get(name) {
        // TODO: Make this a bit cleaner
        if (['compress', 'streams', 'form'].includes(name)) {
            return this._container[name] || false;
        }
        else {
            return this._container[name] || null;
        }
    }
    /**
     * Adds the specified middleware to the container
     * @param name The name of the middleware
     * @param data The middleware itself
     */
    add(name, data) {
        this._container[name] = data;
        const logger = this.get('logger');
        if (logger)
            logger.info(`Added middleware ${name} to the container.`);
    }
    /**
     * Checks if this container contains the middleware that was[n't] injected
     * @param name The middleware's name
     * @returns If the container has it or not
     */
    has(name) {
        return this._container.hasOwnProperty(name);
    }
    /**
     * Filters out anything by it's cycle type
     * @param type The middleware type
     * @returns The middleware
     */
    filter(type) {
        const results = [];
        for (const key in this._container) {
            const ware = this._container[key];
            if (ware.cycleType === _1.CycleType.None)
                continue;
            if (ware.cycleType === type)
                results.push(ware);
        }
        return results;
    }
    /**
     * Returns if the container is empty
     */
    isEmpty() {
        const keys = Object.keys(this._container);
        return keys.length === 0;
    }
}
exports.default = MiddlewareContainer;
