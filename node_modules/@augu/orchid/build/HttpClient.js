"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const middleware_1 = require("./middleware");
const Container_1 = __importDefault(require("./middleware/Container"));
const createRequest_1 = __importDefault(require("./util/createRequest"));
const getOption_1 = __importDefault(require("./util/getOption"));
const DEFAULT_USER_AGENT = `Orchid (v${require('../package.json').version}, https://github.com/auguwu/Orchid)`;
/**
 * The client itself, used for adding middleware or making requests to different APIs
 */
class HttpClient {
    /**
     * Create a new instance of the Http Client
     * @param {HttpClientOptions} options Any additional options
     */
    constructor(options) {
        this.middleware = new Container_1.default();
        this.userAgent = getOption_1.default('agent', DEFAULT_USER_AGENT, options);
        this.defaults = getOption_1.default('defaults', {}, options);
        if (options && options.hasOwnProperty('middleware')) {
            const middleware = options.middleware;
            if (Array.isArray(middleware)) {
                for (const ware of middleware)
                    this.use(ware);
            }
        }
    }
    /**
     * Adds middleware to the container
     *
     * Before you make a request, make sure you added all of your middleware
     * or Orchid will add the middleware *when* a request is made, so we can reuse it.
     * You can also append middleware when you construct this http client, in it's constructor.
     *
     * @param middleware The middleware to append
     * @returns This instance to chain methods
     */
    use(middleware) {
        if (middleware.cycleType === middleware_1.CycleType.None)
            middleware.intertwine.apply(this);
        else
            this.middleware.add(middleware.name, middleware);
        return this;
    }
    /**
     * Sets an custom user agent
     * @param agent The agent to use
     * @returns This instance to chain methods
     */
    setAgent(agent) {
        this.userAgent = agent;
        return this;
    }
    /**
     * Makes a request to a server on the internet
     * @param options The request options
     * @returns A new Request instance to add metadata, etc
     */
    request(options) {
        return createRequest_1.default.call(this, options.url, options.method || 'get', options);
    }
    /**
     * Makes a request as a GET request
     * @param url The URL string or the options itself
     * @param options The request options
     * @returns A new Request instance to add metadata, etc
     */
    get(url, options) {
        return createRequest_1.default.call(this, url, 'get', options);
    }
    /**
     * Makes a request as a PUT request
     * @param url The URL string or the request options
     * @param options The request options
     * @returns A new Request instance to add metadata, etc
     */
    put(url, options) {
        return createRequest_1.default.call(this, url, 'put', options);
    }
    /**
     * Makes a request as a POST request
     * @param url The URL string or the request options
     * @param options The request options
     * @returns A new Request instance to add metadata, etc
     */
    post(url, options) {
        return createRequest_1.default.call(this, url, 'post', options);
    }
    /**
     * Makes a request as a HEAD request
     * @param url The URL string or the request options
     * @param options The request options
     * @returns A new Request instance to add metadata, etc
     */
    head(url, options) {
        return createRequest_1.default.call(this, url, 'head', options);
    }
    /**
     * Makes a request as a TRACE request
     * @param url The URL string or the request options
     * @param options The request options
     * @returns A new Request instance to add metadata, etc
     */
    trace(url, options) {
        return createRequest_1.default.call(this, url, 'trace', options);
    }
    /**
     * Makes a request as a DELETE request
     * @param url The URL string or the request options
     * @param options The request options
     * @returns A new Request instance to add metadata, etc
     */
    delete(url, options) {
        return createRequest_1.default.call(this, url, 'delete', options);
    }
    /**
     * Makes a request as a CONNECT request
     * @param url The URL string or the request options
     * @param options The request options
     * @returns A new Request instance to add metadata, etc
     */
    connect(url, options) {
        return createRequest_1.default.call(this, url, 'connect', options);
    }
    /**
     * Makes a request as a OPTIONS request
     * @param url The URL string or the request options
     * @param options The request options
     * @returns A new Request instance to add metadata, etc
     */
    options(url, options) {
        return createRequest_1.default.call(this, url, 'options', options);
    }
}
exports.default = HttpClient;
