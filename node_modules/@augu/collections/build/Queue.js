"use strict";
/**
 * Copyright (c) 2019-2021 August
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const utils = __importStar(require("./utils"));
/**
 * Represents a [[Queue]] class, which handles queue-based systems in a simple class.
 * @template T The structure of this [[Queue]] instance
 */
class Queue {
    /**
     * Represents a [[Queue]] class, which handles queue-based systems in a simple class.
     * @param items The items to inject when creating a new instance
     */
    constructor(items) {
        this.items = items !== null && items !== void 0 ? items : [];
        const compat = [
            'add',
            'addFirst'
        ];
        for (let i = 0; i < compat.length; i++) {
            let func;
            switch (compat[i]) {
                case 'addFirst':
                    func = this.unshift;
                    break;
                case 'add':
                    func = this.push;
                    break;
                default:
                    func = undefined;
                    break;
            }
            if (func !== undefined) {
                this[compat[i]] = function (thiz, ...args) {
                    return func.apply(thiz, [...args]);
                }.bind(this);
            }
        }
    }
    /** Returns if this [[`Queue`]] is empty or not */
    get empty() {
        return this.items.length === 0;
    }
    /**
     * Pushes a new item at the end of the callstack
     * @param item The item to push
     * @returns The size of this [[Queue]]
     */
    push(item) {
        this.items.push(item);
        return this.items.length;
    }
    /**
     * Inserts a new element at the start of the callstack
     * @param item The item to push
     * @returns The size of this [[Queue]]
     */
    unshift(item) {
        this.items.unshift(item);
        return this.items.length;
    }
    /**
     * Returns the first item in the cache and removes it from the cache
     */
    shift() {
        return this.items.shift();
    }
    /**
     * Returns the last item in the cache and removes it from the cache
     */
    pop() {
        return this.items.pop();
    }
    /**
     * Finds an item in the cache or returns `undefined` if not found
     * @param predicate The predicate function
     */
    find(predicate) {
        return this.items.find(predicate);
    }
    /**
     * Returns the the queued items as an Array
     */
    toArray() {
        return this.items;
    }
    /**
     * Returns the last value of the cache
     */
    last() {
        return this.items[this.items.length - 1];
    }
    /**
     * Returns the value or `null` if not found
     * @param index The index to peek at
     * @returns A value if it didn't return null
     */
    get(index) {
        if (!this.items.length)
            return null;
        const item = this.items[index];
        return (item === void 0 || item === null) ? null : item;
    }
    /**
     * Removes the item from the queue
     *
     * @warning Use `Queue#tick` to remove all items!
     * @param item The item to remove
     */
    remove(item) {
        const r = utils.removeArray(this.items, item);
        this.items = r;
        return this;
    }
    /**
     * Checks if the key is included in the cache
     * @param key The key to find
     */
    includes(key) {
        return this.items.includes(key);
    }
    /**
     * Returns the size of this [[Queue]]
     */
    size() {
        return this.items.length;
    }
    /**
     * Clones a new [[Queue]] instance with the items available
     */
    clone() {
        return new this.constructor(this.items);
    }
    [Symbol.iterator]() {
        let index = -1;
        const items = this.toArray();
        return {
            next: () => ({
                value: items[++index],
                done: index >= items.length
            })
        };
    }
}
exports.Queue = Queue;
