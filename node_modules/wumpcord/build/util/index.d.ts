/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/// <reference types="node" />
import type { AllowedMentions, MessageContent, MessageContentOptions, MessageFile } from '../types';
import type WebSocketClient from '../gateway/WebSocketClient';
import * as discord from 'discord-api-types';
import { Readable } from 'stream';
/**
 * All utilities available to Wumpcord
 */
export default class Util {
    constructor();
    /**
     * Gets a value from a object if it exists, if it doesn't, it'll use the provided [defaultValue].
     * @param obj The object to get the value from
     * @param prop The property to get the value from
     * @param defaultValue A default value, if provided
     * @returns The value if it exists or the [defaultValue] if it doesn't
     */
    static get<T extends object, K extends keyof T>(obj: T, prop: K, defaultValue: T[K]): T[K];
    /**
     * Halts the process asynchronously for an amount of time
     * @param ms The amount of milliseconds to halt
     */
    static sleep(ms: number): Promise<unknown>;
    /**
     * Merges 2 objects into one
     * @param given The given object
     * @param def The default object
     */
    static merge<T>(given: T, def: T): T;
    /**
     * Finds a object's key from it's initial value
     * @param obj The object
     * @param key The key to find
     * @returns The value found or `null` if not specified
     */
    static getKey<T extends object, K extends keyof T>(obj: T, key: T[K]): K;
    /**
     * Formats a message to a body that we can send
     * @param client The client for [MessageContent.mentions]
     * @param content The content to send
     * @param options Any additional options, if needed
     */
    static formatMessage(client: WebSocketClient, content: MessageContent, options?: MessageContentOptions): discord.RESTPostAPIChannelMessageJSONBody & {
        file?: MessageFile | MessageFile[] | undefined;
    };
    static formatAllowedMentions(mentions: AllowedMentions, client: WebSocketClient): discord.APIAllowedMentionsSend;
    static isReadableStream(stream: unknown): stream is Readable;
    static readableToBuffer(stream: Readable): Promise<Buffer>;
    static isObject(value: unknown): value is object;
    static hasNaclInstalled(): boolean;
    static objectToQuery<T extends object = object>(obj: T): string;
    static bufferToBase64(image: Buffer, type?: 'png' | 'jpg' | 'gif'): string;
}
