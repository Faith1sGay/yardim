"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Represents an emittion class for emitting events from different structural classes
 */
class EventBus {
    constructor() {
        /** Amount of max listeners to implement */
        this.maxListeners = 250;
        /** The actual listener map */
        this.listeners = {};
    }
    /**
     * Emits a event from the callstack
     * @param event The event to emit
     * @param args Any additional arguments to add-onto the listener
     * @returns A boolean value if it was emitted or not
     */
    emit(event, ...args) {
        if (!(event in this.listeners))
            return false;
        const listeners = this.listeners[event];
        if (!listeners.length)
            return false;
        for (let i = 0; i < listeners.length; i++) {
            const listener = listeners[i];
            listener(...args);
        }
        return true;
    }
    /**
     * Pushes a new event to the callstack
     * @param event The event
     * @param listener The listener
     */
    on(event, listener) {
        const listeners = this.listeners[event] || [];
        if (listeners.length > this.maxListeners)
            throw new TypeError(`Reached max event listeners in event '${event}' (${listeners.length})`);
        listeners.push(listener);
        this.listeners[event] = listeners;
        return this;
    }
    /**
     * Pushes a event to the callstack and removes it when it's emitted
     * @param event The event
     * @param listener The listener
     */
    once(event, listener) {
        // @ts-ignore
        return this.on(event, (...args) => {
            listener(...args);
            this.remove(event, listener);
        });
    }
    /**
     * Removes a event from the callstack
     * @param event The event to remove
     * @param listener The listener to remove
     */
    remove(event, listener) {
        if (!this.listeners.hasOwnProperty(event))
            return false;
        const listeners = this.listeners[event];
        if (!listeners.length)
            return false;
        const index = listeners.indexOf(listener);
        if (index !== -1)
            listeners.splice(index, 1);
        this.listeners[event] = listeners;
        return true;
    }
    /**
     * Returns the size of all events available or a specific event
     * @param event The event
     */
    size(event) {
        if (event) {
            return this.listeners[event] ? this.listeners[event].length : 0;
        }
        else {
            return Object.keys(this.listeners).length;
        }
    }
    /**
     * Sets the maximum amount of listeners to add
     * @param count The amount to set
     */
    setMaxListeners(count) {
        this.maxListeners = count;
        return this;
    }
    /**
     * Removes all of the listeners in this [EventBus]
     */
    removeAllListeners() {
        this.listeners = {};
        return this;
    }
}
exports.default = EventBus;
