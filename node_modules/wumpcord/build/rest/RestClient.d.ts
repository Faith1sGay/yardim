/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { HttpMethod } from '@augu/orchid';
import type Client from '../gateway/WebSocketClient';
import * as types from '../types';
/**
 * Represents a dispatched request
 */
interface RequestDispatch<T = unknown> {
    /** Resolves the request */
    resolve(value: T | PromiseLike<T>): void;
    /** The error that was thrown */
    reject(error?: any): void;
    /** discord is bullshit so this is here because yes i mean- The audit log reason to show up */
    auditLogReason?: string;
    /** The headers to send out */
    headers?: {
        [x: string]: any;
    };
    /** The endpoint to make the request to */
    endpoint: string;
    /** The http method verb to use */
    method: HttpMethod;
    /** A file packet to send to Discord */
    file?: types.MessageFile | types.MessageFile[];
    /** Any data to send to Discord */
    data?: T;
}
/**
 * Represents a class to handle requests to Discord
 */
export default class RestClient {
    /** The last time the rest client has dispatched a request (when [RestClient.dispatch] was called) */
    lastDispatchedAt: number;
    /** If we are being ratelimited or not */
    ratelimited: boolean;
    /** The last rest call from Discord (when we receive a payload from [RestClient._handleRequest]) */
    lastCallAt: number;
    /** List of requests to dispatch */
    private requests;
    /** The client to use */
    private client;
    /** If we are locked from making anymore requests */
    locked: boolean;
    /** The HTTP client to use */
    private http;
    /**
     * Represents a class to handle requests to Discord
     * @param client The client to use
     */
    constructor(client: Client);
    /**
     * Gets the current ping of the rest client
     */
    get ping(): number;
    /**
     * If the rest client is busy or not
     */
    get busy(): boolean;
    /**
     * Dispatch a request to Discord
     * @param options The request options
     */
    dispatch<T, D = unknown>(options: Omit<RequestDispatch<D>, 'resolve' | 'reject'>): Promise<T>;
    /**
     * Executes the request and handles ratelimiting
     * @param request The dispatched requeest
     */
    _executeRequest(request: RequestDispatch): Promise<unknown>;
}
export {};
