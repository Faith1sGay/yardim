/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type { MessageContent, MessageContentOptions } from '../types';
import type { APIUser } from 'discord-api-types';
import type WebSocketClient from '../gateway/WebSocketClient';
import { DMChannel } from './channel/DMChannel';
import Base from './Base';
declare type UserFlag = 'None' | 'Staff' | 'Partner' | 'HypesquadEvents' | 'BugHunterLevel1' | 'Bravery' | 'Brillance' | 'Balance' | 'EarlySupporter' | 'Teamuser' | 'System' | 'BugHunterLevel2' | 'VerifiedBot' | 'VerifiedBotDev';
export declare class User extends Base<APIUser> {
    /** The user's discriminator */
    discriminator: string;
    /** The DM channel created when using [User.createDM], [User.leaveDM], or [User.send] */
    private _dmChannel;
    /** The user's username */
    username: string;
    /** The [WebSocketClient] attached */
    private client;
    /** The user's avatar UUID */
    avatar: string | null;
    /** The user account is a system account or not */
    system: boolean;
    /** The user's public flags */
    flags: number;
    /** If the user is a bot account or not */
    bot: boolean;
    /**
     * Creates a new [User] instance
     * @param client The [WebSocketClient] attached
     * @param data The data from Discord
     */
    constructor(client: WebSocketClient, data: APIUser);
    patch(data: APIUser): void;
    /** Returns the default avatar's UUID */
    get defaultAvatar(): number;
    /** Returns the URL for the default avatar */
    get defaultAvatarUrl(): string;
    /** Returns the avatar url in 512x512 and using .png (or .gif), use [User.dynamicAvatarUrl] to customize the size and extension */
    get avatarUrl(): string;
    /** Returns the mention string for this user */
    get mention(): string;
    /** Returns the user's full tag */
    get tag(): string;
    /**
     * Check if the user has a specified flag
     * @param name The flag to check
     */
    flag(name: UserFlag): boolean;
    /**
     * Creates a DM channel with this user and the bot
     * @returns The DM channel or a REST error if we can't create one
     */
    createDM(): Promise<DMChannel>;
    /**
     * Leaves the DM channel, if there is no DM channel populated,
     * it'll return `null`, else it'll return the DM channel upon request
     * or a REST error if anything occurs
     */
    leaveDM(): Promise<DMChannel | null>;
    /**
     * Sends a message to the user
     * @param content The content to send
     * @param options Any additional options, if needed
     */
    send(content: MessageContent, options?: MessageContentOptions): Promise<import("./Message").Message<import("../types").AnyGuildTextableChannel>>;
    toString(): string;
}
export {};
