/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/// <reference types="node" />
import { GuildFeature } from '../Constants';
import type { AnyChannel } from '../types';
import GuildVoiceStateManager from '../managers/GuildVoiceStateManager';
import type WebSocketClient from '../gateway/WebSocketClient';
import GuildPresenceManager from '../managers/GuildPresencesManager';
import GuildMemberManager from '../managers/GuildMemberManager';
import GuildEmojiManager from '../managers/GuildEmojiManager';
import GuildRoleManager from '../managers/GuildRoleManager';
import { Collection } from '@augu/collections';
import ChannelManager from '../managers/ChannelManager';
import GuildPreview from './guild/GuildPreview';
import { Readable } from 'stream';
import GuildMember from './guild/GuildMember';
import GuildInvite from './guild/GuildInvite';
import { Webhook } from './Webhook';
import GuildEmoji from './guild/GuildEmoji';
import AuditLogs from './audits/AuditLogs';
import GuildRole from './guild/GuildRole';
import GuildBan from './guild/GuildBan';
import Base from './Base';
import { APIEmoji, APIGuild, APIGuildWelcomeScreen, APIRole, RESTGetAPIGuildVoiceRegionsResult } from 'discord-api-types';
interface IGuild extends APIGuild {
    shard_id: number;
}
interface PartialPermissionOverwrite {
    allow: string;
    deny: string;
    type: 'role' | 'member';
    id: string;
}
interface FetchGuildMembersOptions {
    presences?: boolean;
    limit?: number;
    query?: any;
    nonce?: string;
    force?: boolean;
    time?: number;
    ids?: string[];
}
export interface GuildBanOptions {
    reason?: string;
    days?: number;
}
interface CreateChannelOptions {
    permissionOverwrites?: PartialPermissionOverwrite[];
    ratelimitPerUser?: number;
    userLimit?: number;
    parentID?: string;
    position?: number;
    bitrate?: number;
    topic?: string;
    nsfw?: boolean;
    type: number;
    name: string;
}
interface ModifyGuildOptions {
    defaultMessageNotifications?: number;
    explicitContentFilter?: number;
    verificationLevel?: number;
    afkChannelTimeout?: number;
    systemChannelID?: string;
    afkChannelID?: string;
    ownerID?: string;
    splash?: string;
    banner?: string;
    region?: string;
    icon?: string;
    name?: string;
}
export interface ModifyGuildMemberOptions {
    channelID?: string;
    roles?: string[];
    deaf?: boolean;
    mute?: boolean;
    nick?: string;
}
interface CreateRoleOptions {
    permissions?: number;
    mentionable?: boolean;
    hoistable?: boolean;
    color?: string | number;
    name?: string;
}
interface GuildPruneOptions {
    computed?: boolean;
    roles?: string[];
    days?: number;
}
interface FetchAuditLogsOptions {
    actionType?: number;
    before?: string;
    limit?: number;
}
interface CreateEmojiOptions {
    roles?: string[];
    image: ImageData;
    name: string;
}
interface ModifyEmojiOptions {
    roles?: string[];
    name?: string;
    id: string;
}
interface ImageData {
    content: Buffer | Readable;
    type?: 'jpg' | 'png' | 'gif';
}
declare type EditGuildRoleOptions = CreateRoleOptions;
export declare class Guild extends Base<IGuild> {
    voiceStates: GuildVoiceStateManager;
    unavailable: false;
    presences: GuildPresenceManager;
    channels: ChannelManager;
    members: GuildMemberManager;
    private client;
    emojis: GuildEmojiManager;
    roles: GuildRoleManager;
    defaultMessageNotifications: number;
    approximatePresenceCount: number;
    approximateMemberCount: number;
    publicUpdatesChannelID: string | null;
    explicitContentFilter: number;
    maxVideoChannelUsers: number;
    systemChannelFlags: number;
    verificationLevel: number;
    systemChannelID: string | null;
    widgetChannelID: string | null;
    discoverySplash: string | null;
    preferredLocale: string;
    rulesChannelID: string | null;
    welcomeScreen: APIGuildWelcomeScreen;
    applicationID: string | null;
    widgetEnabled: boolean;
    vanityURLCode: string | null;
    afkChannelID: string | null;
    maxPresences: number | null;
    memberCount: number;
    premiumTier: number;
    description: string | null;
    afkTimeout: number;
    maxMembers: number;
    boosters: number;
    features: GuildFeature[];
    iconHash: string | null;
    mfaLevel: number;
    joinedAt: Date;
    shardID: number;
    ownerID: string;
    isOwner: boolean;
    banner: string | null;
    region: string;
    large: boolean;
    icon: string | null;
    name: string;
    constructor(client: WebSocketClient, data: IGuild);
    patch(data: Partial<IGuild>): void;
    get shard(): import("../gateway/WebSocketShard").default | undefined;
    get owner(): import("./User").User | null;
    fetchMembers({ presences, limit, query, time, nonce, force, ids }?: FetchGuildMembersOptions): Promise<Collection<string, GuildMember>>;
    delete(): Promise<unknown>;
    ban(userID: string, opts?: GuildBanOptions): Promise<void>;
    unban(userID: string, reason?: string): Promise<void>;
    createChannel(opts: CreateChannelOptions): Promise<void>;
    getRegions(): Promise<RESTGetAPIGuildVoiceRegionsResult>;
    getRegionIds(): Promise<string[]>;
    getPreview(): Promise<GuildPreview | null>;
    getChannels<T extends AnyChannel = AnyChannel>(): Promise<T[]>;
    getGuildMember(memberID: string): Promise<GuildMember>;
    getRoles(): Promise<GuildRole[]>;
    getBans(): Promise<GuildBan[]>;
    getInvites(): Promise<GuildInvite[]>;
    getAuditLogs(opts?: FetchAuditLogsOptions): Promise<AuditLogs>;
    getEmojis(): Promise<GuildEmoji[]>;
    getEmoji(id: string): Promise<GuildEmoji>;
    getWebhooks(): Promise<Webhook[]>;
    modify(opts: ModifyGuildOptions): Promise<this>;
    modifyChannelPosition(id: string, pos: number): Promise<void>;
    modifyMember(memberID: string, opts: ModifyGuildMemberOptions, reason?: string): Promise<void>;
    addRole(memberID: string, roleID: string, reason?: string): Promise<void>;
    removeRole(memberID: string, roleID: string, reason?: string): Promise<void>;
    kickMember(memberID: string, reason?: string): Promise<void>;
    createRole(opts: CreateRoleOptions): TypeError | Promise<GuildRole>;
    deleteRole(roleID: string, reason?: string): Promise<void>;
    modifyRole(roleID: string, opts: EditGuildRoleOptions, reason?: string): TypeError | Promise<APIRole>;
    modifyRolePosition(roleID: string, pos: number): Promise<void>;
    prune(opts?: GuildPruneOptions): Promise<void>;
    createEmoji(options: CreateEmojiOptions): Promise<APIEmoji>;
    modifyEmoji(options: ModifyEmojiOptions): Promise<APIEmoji>;
    deleteEmoji(id: string): Promise<void>;
    toString(): string;
}
export {};
