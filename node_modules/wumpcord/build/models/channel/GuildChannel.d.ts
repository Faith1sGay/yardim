/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type WebSocketClient from '../../gateway/WebSocketClient';
import { PermissionOverwrite } from '../PermissionOverwrite';
import type { APIChannel } from 'discord-api-types/v8';
import { Collection } from '@augu/collections';
import type { Guild } from '../Guild';
import { Channel } from '../Channel';
export default class GuildChannel extends Channel {
    /** List of permission overwrites for this [GuildChannel] */
    permissionOverwrites: Collection<string, PermissionOverwrite>;
    /** The parent category's ID, this is `null` if [GuildChannel] is a [CategoryChannel] or doesn't have a parent */
    parentID: string | null;
    /** The sorting position the channel is in */
    position: number;
    /** The guild ID this [GuildChannel] is attached to */
    guildID?: string;
    /** The guild that this [GuildChannel] is attached to */
    guild: Guild;
    /** The [WebSocketClient] attached */
    client: WebSocketClient;
    /** The name of this [GuildChannel] instance */
    name: string;
    /** If the channel is marked NSFW or not */
    nsfw: boolean;
    /**
     * Creates a new [GuildChannel] instance
     * @param client The WebSocket client attached
     * @param data The data supplied from Discord
     */
    constructor(client: WebSocketClient, data: APIChannel);
    patch(data: APIChannel): void;
}
