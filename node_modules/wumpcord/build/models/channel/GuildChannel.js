"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const PermissionOverwrite_1 = require("../PermissionOverwrite");
const collections_1 = require("@augu/collections");
const Channel_1 = require("../Channel");
class GuildChannel extends Channel_1.Channel {
    /**
     * Creates a new [GuildChannel] instance
     * @param client The WebSocket client attached
     * @param data The data supplied from Discord
     */
    constructor(client, data) {
        super(data);
        this.permissionOverwrites = new collections_1.Collection();
        this.guildID = data.guild_id;
        this.client = client;
        this.patch(data);
    }
    patch(data) {
        super.patch(data);
        if (data.position !== undefined)
            this.position = data.position;
        if (data.parent_id !== undefined)
            this.parentID = data.parent_id;
        if (data.name !== undefined)
            this.name = data.name;
        if (data.nsfw !== undefined)
            this.nsfw = data.nsfw ?? false;
        if (data.permission_overwrites !== undefined) {
            for (let i = 0; i < data.permission_overwrites.length; i++) {
                const overwrite = data.permission_overwrites[i];
                this.permissionOverwrites?.set(overwrite.id, new PermissionOverwrite_1.PermissionOverwrite(overwrite));
            }
        }
    }
}
exports.default = GuildChannel;
