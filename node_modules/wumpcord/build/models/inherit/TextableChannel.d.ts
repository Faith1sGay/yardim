/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { APIPartialChannel } from 'discord-api-types';
import ChannelMessagesManager from '../../managers/ChannelMessagesManager';
import WebSocketClient from '../../gateway/WebSocketClient';
import { Message } from '../Message';
import { Channel } from '../Channel';
import Permission from '../../util/Permissions';
import { Webhook } from '../Webhook';
import { MessageContent, MessageContentOptions } from '../../types';
interface GetMessagesOptions {
    around?: string;
    before?: string;
    after?: string;
}
export default class TextableChannel<T extends APIPartialChannel> extends Channel {
    messages: ChannelMessagesManager;
    client: WebSocketClient;
    constructor(client: WebSocketClient, data: T);
    bulkDelete(messages: (string | Message)[]): Promise<number>;
    getMessages(amount: number, options?: GetMessagesOptions): Promise<Message<import("../../types").AnyGuildTextableChannel>[]>;
    sendTyping(): Promise<void>;
    getPins(): Promise<Message<import("../../types").AnyGuildTextableChannel>[]>;
    permissionsOf(memberID: string): Permission;
    getWebhooks(): Promise<Webhook[]>;
    send(content: MessageContent, options?: MessageContentOptions): Promise<Message<import("../../types").AnyGuildTextableChannel>>;
}
export {};
