"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const Constants_1 = require("../Constants");
const DMChannel_1 = require("./channel/DMChannel");
const Base_1 = __importDefault(require("./Base"));
class User extends Base_1.default {
    /**
     * Creates a new [User] instance
     * @param client The [WebSocketClient] attached
     * @param data The data from Discord
     */
    constructor(client, data) {
        super(data.id);
        this.client = client;
        this.patch(data);
    }
    patch(data) {
        this.discriminator = data.discriminator;
        this.username = data.username;
        this.avatar = data.avatar;
        this.system = Boolean(data.system);
        this.flags = data.public_flags;
        this.bot = Boolean(data.bot);
    }
    /** Returns the default avatar's UUID */
    get defaultAvatar() {
        const discrim = Number(this.discriminator);
        return discrim % 5;
    }
    /** Returns the URL for the default avatar */
    get defaultAvatarUrl() {
        return `${Constants_1.CDNUrl}/avatars/${this.defaultAvatar}.png`;
    }
    /** Returns the avatar url in 512x512 and using .png (or .gif), use [User.dynamicAvatarUrl] to customize the size and extension */
    get avatarUrl() {
        const format = this.avatar.startsWith('a_') ? 'gif' : 'png';
        return this.avatar === null ? this.defaultAvatarUrl : `${Constants_1.CDNUrl}/avatars/${this.id}/${this.avatar}?size=512&format=${format}`;
    }
    /** Returns the mention string for this user */
    get mention() {
        return `<@!${this.id}>`;
    }
    /** Returns the user's full tag */
    get tag() {
        return `${this.username}#${this.discriminator}`;
    }
    /**
     * Check if the user has a specified flag
     * @param name The flag to check
     */
    flag(name) {
        const bit = Constants_1.UserFlags[name];
        return !!(this.flags & bit);
    }
    /**
     * Creates a DM channel with this user and the bot
     * @returns The DM channel or a REST error if we can't create one
     */
    createDM() {
        if (this._dmChannel)
            return Promise.resolve(this._dmChannel);
        return this.client.rest.dispatch({
            endpoint: '/users/@me/channels',
            method: 'POST',
            data: {
                recipient_id: this.id // eslint-disable-line camelcase
            }
        }).then(data => {
            const channel = new DMChannel_1.DMChannel(this.client, data);
            this.client.channels.add(channel);
            this._dmChannel = channel;
            return this._dmChannel;
        });
    }
    /**
     * Leaves the DM channel, if there is no DM channel populated,
     * it'll return `null`, else it'll return the DM channel upon request
     * or a REST error if anything occurs
     */
    leaveDM() {
        if (!this._dmChannel)
            return Promise.resolve(null);
        return this.client.rest.dispatch({
            endpoint: `/channels/${this._dmChannel.id}`,
            method: 'DELETE'
        }).then(() => {
            const channel = this._dmChannel;
            this._dmChannel = undefined;
            return channel;
        });
    }
    /**
     * Sends a message to the user
     * @param content The content to send
     * @param options Any additional options, if needed
     */
    async send(content, options) {
        if (!this._dmChannel)
            await this.createDM();
        return this._dmChannel.send(content, options);
    }
    toString() {
        return `[wumpcord.User<U: ${this.tag}>]`;
    }
}
exports.User = User;
