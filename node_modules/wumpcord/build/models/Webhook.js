"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhook = void 0;
const Constants_1 = require("../Constants");
const Message_1 = require("./Message");
const User_1 = require("./User");
const util_1 = __importDefault(require("../util"));
const Base_1 = __importDefault(require("./Base"));
class Webhook extends Base_1.default {
    constructor(client, data) {
        super(data.id);
        this.client = client;
        this.patch(data);
    }
    patch(data) {
        if (data.application_id !== undefined)
            this.applicationID = data.application_id;
        if (data.channel_id !== undefined)
            this.channelID = data.channel_id;
        if (data.guild_id !== undefined)
            this.guildID = data.guild_id;
        if (data.avatar !== undefined)
            this.avatar = data.avatar;
        if (data.token !== undefined)
            this.token = data.token;
        if (data.type !== undefined)
            this.type = Constants_1.WebhookTypes[data.type];
        if (data.name !== undefined)
            this.name = data.name;
        // Let's not populate cache with webhook users
        if (data.user !== undefined)
            this.user = new User_1.User(this.client, data.user);
    }
    fetch() {
        return this.client.rest.dispatch({
            endpoint: `/webhooks/${this.id}`,
            method: 'GET'
        }).then(d => {
            this.patch(d);
            return this;
        });
    }
    async modify(options) {
        if (!options)
            throw new TypeError('Missing `options` object');
        if (!util_1.default.isObject(options))
            throw new TypeError(`Expected \`object\`, but received ${typeof options}`);
        if (!Object.keys(options).length)
            throw new TypeError('Cannot pass in an empty object.');
        if (options.image && (!util_1.default.isReadableStream(options.image) || !Buffer.isBuffer(options)))
            throw new TypeError(`[options.image] requires a \`ReadableStream\` or \`Buffer\` object, received ${typeof options.image}`);
        if (options.name && typeof options.name !== 'string')
            throw new TypeError(`[options.name] requires a \`string\`, but received ${typeof options.name}`);
        if (options.channelID && typeof options.channelID !== undefined)
            throw new TypeError(`[options.channelID] requires a \`string\` but received ${typeof options.channelID}`);
        if (options.auth && typeof options.auth !== 'boolean')
            throw new TypeError(`[options.auth] requires a \`boolean\` value, but received ${typeof options.auth}`);
        if (options.auth === true && options.channelID !== undefined)
            throw new TypeError('[options.auth | options.channelID] Can\'t use `channelID` and `auth` at the same time. (https://discord.com/developers/docs/resources/webhook#modify-webhook-with-token)');
        let image = undefined;
        if (options.image !== undefined) {
            if (util_1.default.isReadableStream(options.image))
                image = await util_1.default.readableToBuffer(options.image);
            if (Buffer.isBuffer(options.image))
                image = options.image;
        }
        let file = image !== undefined ? { file: image } : undefined;
        return this.client.rest.dispatch({
            endpoint: `/webhooks/${this.id}${options.auth ? `/${this.token}` : ''}`,
            method: 'GET',
            file,
            data: {
                channel_id: options.channelID,
                name: options.name
            }
        });
    }
    send(content, options) {
        if (!this.token)
            throw new TypeError('Missing `token` value in this [Webhook]');
        const message = util_1.default.formatMessage(this.client, content, options);
        let wait = false;
        if (util_1.default.isObject(content))
            wait = content.wait ?? false;
        else if (util_1.default.isObject(options))
            wait = options.wait ?? false;
        else
            wait = false;
        return this.client.rest.dispatch({
            endpoint: `/webhooks/${this.id}/${this.token}${wait === true ? '?wait=true' : ''}`,
            method: 'POST',
            file: message.file,
            data: message
        }).then((data) => data === void 0 ? undefined : new Message_1.Message(this.client, data));
    }
    toString() {
        return `[wumpcord.Webhook<U: ${this.user?.tag ?? 'Unknown Webhook#0000'}>]`;
    }
}
exports.Webhook = Webhook;
