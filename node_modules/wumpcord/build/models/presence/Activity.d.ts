/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type { GatewayActivity, GatewayActivityTimestamps, GatewayActivityParty, GatewayActivityEmoji, ActivityType } from 'discord-api-types';
export default class Activity {
    /** The timestamps available for this [Activity] */
    timestamps: GatewayActivityTimestamps;
    /** Details on when the activity started displaying */
    createdAt: Date;
    /** The details of the [Activity], indicating this is a Rich Presence */
    details: string | null;
    /** Assets available for this [Activity], if any */
    assets: GatewayActivity['assets'];
    /** The partial emoji instance */
    emoji: GatewayActivityEmoji;
    /** The state of the [Activity], indicating this is a Rich Presence */
    state: string | null;
    /** The party details for this [Activity], if any */
    party: GatewayActivityParty;
    /** The type of the activity */
    type: ActivityType;
    /** The name of the activity */
    name: string;
    /** If this activity is a Rich Presence activity or not */
    rpc: boolean;
    /**
     * Creates a new [Activity] instance
     * @param data The activity data
     */
    constructor(data: GatewayActivity);
    patch(data: GatewayActivity): void;
    toString(): string;
}
