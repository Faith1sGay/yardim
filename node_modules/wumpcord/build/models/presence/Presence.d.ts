/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { GatewayPresenceUpdate, PresenceUpdateStatus } from 'discord-api-types';
import type WebSocketClient from '../../gateway/WebSocketClient';
import { User } from '../User';
import Activity from './Activity';
import Base from '../Base';
declare type ClientStatus = {
    [P in 'desktop' | 'mobile' | 'web']: PresenceUpdateStatus;
};
export default class Presence extends Base<GatewayPresenceUpdate> {
    /** The client status available for this [Presence] */
    clientStatus: ClientStatus;
    /** List of activities this user beholds */
    activities: Activity[];
    /** The current status (online, idle, dnd, offline) */
    status: 'offline' | 'online' | 'idle' | 'dnd';
    /** The [WebSocketClient] attached to this [Presence] */
    private client;
    /** The guild that the presence was emitted in */
    guildID: string;
    /** The user that holds this [Presence] */
    user: User;
    /**
     * Creates a new [Presence] instance
     * @param client The [WebSocketClient] attached
     * @param data The data supplied from Discord
     */
    constructor(client: WebSocketClient, data: GatewayPresenceUpdate);
    patch(data: GatewayPresenceUpdate): void;
    /** Returns the guild that this [Presence] was emitted in, if any. */
    get guild(): import("..").Guild | null;
    toString(): string;
}
export {};
