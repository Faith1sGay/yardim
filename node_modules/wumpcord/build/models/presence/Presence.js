"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = require("../User");
const Activity_1 = __importDefault(require("./Activity"));
const Base_1 = __importDefault(require("../Base"));
const util_1 = __importDefault(require("../../util"));
class Presence extends Base_1.default {
    /**
     * Creates a new [Presence] instance
     * @param client The [WebSocketClient] attached
     * @param data The data supplied from Discord
     */
    constructor(client, data) {
        super(data.user.id);
        this.client = client;
        this.patch(data);
    }
    patch(data) {
        if (data.client_status !== undefined)
            this.clientStatus = {
                desktop: util_1.default.get(data.client_status, 'desktop', "offline" /* Offline */),
                mobile: util_1.default.get(data.client_status, 'mobile', "offline" /* Offline */),
                web: util_1.default.get(data.client_status, 'web', "offline" /* Offline */)
            };
        if (data.guild_id !== undefined)
            this.guildID = data.guild_id;
        if (data.status !== undefined)
            this.status = data.status;
        if (data.user !== undefined)
            this.user = this.client.users.add(new User_1.User(this.client, data.user));
        if (data.activities !== undefined) {
            for (let i = 0; i < data.activities.length; i++) {
                const activity = data.activities[i];
                this.activities.push(new Activity_1.default(activity));
            }
        }
    }
    /** Returns the guild that this [Presence] was emitted in, if any. */
    get guild() {
        return this.client.guilds.get(this.guildID);
    }
    toString() {
        const current = this.activities.length ? this.activities[0] : null;
        // this looks nasty help
        const suffix = this.guild && current
            ? `, G: ${this.guild.name}, C: ${current.name}`
            : this.guild !== null && current === null
                ? `, G: ${this.guild.name}`
                : this.guild === null && current !== null
                    ? `, C: ${current.name}`
                    : '';
        return `[wumpcord.GuildPresence<U: ${this.user.tag}${suffix}]`;
    }
}
exports.default = Presence;
