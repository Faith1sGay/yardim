/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/// <reference types="node" />
import type { APIWebhook } from 'discord-api-types';
import type { MessageContentOptions } from '../types';
import type WebSocketClient from '../gateway/WebSocketClient';
import type { Readable } from 'stream';
import { Message } from './Message';
import { User } from './User';
import Base from './Base';
interface ModifyWebhookOptions {
    channelID?: string;
    image?: Buffer | Readable;
    name?: string;
    auth?: boolean;
}
interface SendWebhookMessageOptions extends MessageContentOptions {
    wait?: boolean;
}
declare type SendWebhookMessage = string | SendWebhookMessageOptions;
export declare class Webhook extends Base<APIWebhook> {
    applicationID: string | null;
    channelID: string;
    guildID: string;
    private client;
    avatar: string | null;
    token: string;
    type: string;
    name: string | null;
    user: User;
    constructor(client: WebSocketClient, data: APIWebhook);
    patch(data: APIWebhook): void;
    fetch(): Promise<this>;
    modify(options: ModifyWebhookOptions): Promise<APIWebhook>;
    send(content: SendWebhookMessage, options?: SendWebhookMessageOptions): Promise<Message<import("../types").AnyGuildTextableChannel> | undefined>;
    toString(): string;
}
export {};
