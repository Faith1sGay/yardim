"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GuildIntegration_1 = __importDefault(require("../guild/GuildIntegration"));
const AuditLogEntry_1 = __importDefault(require("./AuditLogEntry"));
const Webhook_1 = require("../Webhook");
const User_1 = require("../User");
class AuditLogs {
    /**
     * Creates a new [AuditLogEntry] instance
     * @param client The WebSocket client attached
     * @param data The data from Discord
     */
    constructor(client, data) {
        this.client = client;
        this.patch(data);
    }
    patch(data) {
        this.integrations = data.integrations.map(integration => new GuildIntegration_1.default(this.client, integration));
        this.webhooks = data.webhooks.map(webhook => new Webhook_1.Webhook(this.client, webhook));
        this.entries = data.audit_log_entries.map(data => new AuditLogEntry_1.default(this.client, data));
        this.users = data.users.map(user => this.client.users.add(new User_1.User(this.client, user)));
    }
}
exports.default = AuditLogs;
