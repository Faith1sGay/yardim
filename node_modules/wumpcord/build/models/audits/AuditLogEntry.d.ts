/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type { APIAuditLogEntry, APIAuditLogChange } from 'discord-api-types/v8';
import type { GuildTextableChannel } from '../../types';
import type WebSocketClient from '../../gateway/WebSocketClient';
import type { Message } from '../Message';
import Base from '../Base';
export default class AuditLogEntry extends Base<APIAuditLogEntry> {
    /** Number of days after inactive members were kicked (action = Member Prune)  */
    inactiveMembers?: number;
    /** The amount of members removed from the guild (action = Member Prune) */
    membersRemoved?: number;
    /** The action type that was executed */
    actionType: number;
    /** Number of entities that were targeted (actions = Message Delete, Message Delete Bulk, Member Disconnect, Member Move) */
    targetCount?: number;
    /** The channel ID for fallback purposes (actions = Message Delete, Message [Un]pin, Member Moved) */
    channelID?: string;
    /** The message ID for fallback purposes (actions = Message Unpin/Pin) */
    messageID?: string;
    /** The channel that it occured in, if cached (actions = Message Delete, Message [Un]pin, Member Moved) */
    channel?: GuildTextableChannel;
    /** The message that was targeted, if cached (actions = Message Unpin and Message Pin) */
    message?: Message;
    /** The websocket client attached */
    private client;
    /** List of changes, if any */
    changes: APIAuditLogChange[];
    /** The reason on why it was updated */
    reason?: string;
    /** The type that the audit log was executed (actions = Channel Overwrite Create/Delete/Update) */
    type?: 'role' | 'member';
    /** The role name that was updated from the channel overwrite update (actions = Channel Overwrite Create/Delete/Update) */
    role?: string;
    /** The user who performed the audit log action */
    user: any;
    /**
     * Creates a new [AuditLogEntry] instance
     * @param client The WebSocket client attached
     * @param data The data from Discord
     */
    constructor(client: WebSocketClient, data: APIAuditLogEntry);
    patch(data: APIAuditLogEntry): void;
}
