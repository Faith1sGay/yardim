"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = require("../User");
class GuildInvite {
    /**
     * Creates a new [GuildInvite] instance
     * @param client The [WebSocketClient] attached
     * @param data The data supplied from Discord
     */
    constructor(client, data) {
        this.client = client;
        this.patch(data);
    }
    patch(data) {
        if (data.approximate_presence_count !== undefined)
            this.approximatePresenceCount = data.approximate_presence_count;
        if (data.approximate_member_count !== undefined)
            this.approximateMemberCount = data.approximate_member_count;
        if (data.target_user_type !== undefined)
            this.targetUserType = data.target_user_type === 1 ? 'stream' : 'unknown';
        if (data.target_user !== undefined)
            this.targetUser = this.client.users.add(new User_1.User(this.client, data.target_user));
        if (data.created_at !== undefined)
            this.createdAt = new Date(data.created_at);
        if (data.temporary !== undefined)
            this.temporary = data.temporary;
        if (data.channel !== undefined)
            this.channelID = data.channel.id;
        if (data.inviter !== undefined)
            this.inviter = this.client.users.add(new User_1.User(this.client, data.inviter));
        if (data.guild !== undefined)
            this.guildID = data.guild.id;
        if (data.max_uses !== undefined)
            this.maxUses = data.max_uses === 0 ? null : data.max_uses;
        if (data.max_age !== undefined)
            this.maxAge = data.max_age === 0 ? null : data.max_age * 1000;
        if (data.uses !== undefined)
            this.uses = data.uses;
    }
    /**
     * Returns the guild channel that this [GuildInvite] was created in
     */
    get channel() {
        return this.client.channels.get(this.channelID);
    }
    /**
     * Returns the guild that this [GuildInvite] was created in
     */
    get guild() {
        return this.client.guilds.get(this.guildID);
    }
    /**
     * Fetches new metadata for this [GuildInvite] and populates it
     * @param withCounts If we should add the `?with_counts` query parameter
     */
    fetch(withCounts) {
        const endpoint = `/invites/${this.code}${withCounts ? '?with_counts=true' : ''}`;
        return this.client.rest.dispatch({
            endpoint,
            method: 'GET'
        }).then(data => {
            this.patch(data);
            return this;
        });
    }
    /**
     * Deletes the invite and returns this [GuildInvite]
     */
    delete() {
        return this.client.rest.dispatch({
            endpoint: `/invites/${this.code}`,
            method: 'DELETE'
        }).then(() => this);
    }
    toString() {
        return `[wumpcord.GuildInvite "https://discord.gg/${this.code}"]`;
    }
}
exports.default = GuildInvite;
