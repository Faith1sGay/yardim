/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { ModifyGuildMemberOptions } from '../Guild';
import type WebSocketClient from '../../gateway/WebSocketClient';
import type { APIGuildMember } from 'discord-api-types';
import Permission from '../../util/Permissions';
import { GuildRole } from '..';
import { User } from '../User';
import Base from '../Base';
interface IGuildMember extends APIGuildMember {
    guild_id?: string;
}
export default class GuildMember extends Base<IGuildMember> {
    boostedAt: Date | null;
    joinedAt: Date;
    pending: boolean;
    guildID: string;
    isMuted: boolean;
    private _guild;
    isDeaf: boolean;
    private client;
    roles: GuildRole[];
    nick: string | null;
    user: User;
    constructor(client: WebSocketClient, data: IGuildMember);
    patch(data: Partial<IGuildMember>): void;
    get permission(): Permission;
    private _populateGuild;
    modify(opts: ModifyGuildMemberOptions, reason?: string): Promise<void>;
    addRole(role: string | GuildRole, reason?: string): Promise<void>;
    removeRole(role: string | GuildRole, reason?: string): Promise<void>;
    setNick(nick: string, reason?: string): Promise<void>;
    mute(reason?: string): Promise<void>;
    unmute(reason?: string): Promise<void>;
    deafen(reason?: string): Promise<void>;
    undeafen(reason?: string): Promise<void>;
    switch(channelID: string, reason?: string): Promise<void>;
}
export {};
