/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type { APIExtendedInvite } from 'discord-api-types';
import type WebSocketClient from '../../gateway/WebSocketClient';
import { User } from '../User';
export default class GuildInvite {
    /** The approximate presence count available */
    approximatePresenceCount: number;
    /** The approximate member count available */
    approximateMemberCount: number | null;
    /** The target user type */
    targetUserType: 'stream' | 'unknown';
    /** If the invite is temporary or not */
    temporary: boolean;
    /** The target user who this invite was meant to be for */
    targetUser: User;
    /** [Date] value on when this [GuildInvite] was created at */
    createdAt: Date;
    /** The channel's ID that the invite was created in */
    channelID: string;
    /** Maxmium amount of use cases, returns `null` if there is no limit */
    maxUses: number | null;
    /** Millisecond count on when the invite is expired, returns `null` if there is no max age */
    maxAge: number | null;
    /** The user who created the invite */
    inviter: User;
    /** The guild's ID that the invite was created for */
    guildID: string;
    /** The [WebSocketClient] attached to this [GuildInvite] */
    private client;
    /** The code of the invite */
    code: string;
    /** Number of uses this invite has been used on */
    uses: number;
    /**
     * Creates a new [GuildInvite] instance
     * @param client The [WebSocketClient] attached
     * @param data The data supplied from Discord
     */
    constructor(client: WebSocketClient, data: APIExtendedInvite);
    private patch;
    /**
     * Returns the guild channel that this [GuildInvite] was created in
     */
    get channel(): import("..").TextChannel | import("..").NewsChannel | import("..").StoreChannel | import("..").VoiceChannel | import("..").CategoryChannel | null;
    /**
     * Returns the guild that this [GuildInvite] was created in
     */
    get guild(): import("..").Guild | null;
    /**
     * Fetches new metadata for this [GuildInvite] and populates it
     * @param withCounts If we should add the `?with_counts` query parameter
     */
    fetch(withCounts?: boolean): Promise<this>;
    /**
     * Deletes the invite and returns this [GuildInvite]
     */
    delete(): Promise<this>;
    toString(): string;
}
