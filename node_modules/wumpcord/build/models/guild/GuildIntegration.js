"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = require("../User");
const Base_1 = __importDefault(require("../Base"));
class GuildIntegration extends Base_1.default {
    /**
     * Creates a new [GuildIntegration] instance
     * @param client The [WebSocketClient] attached to this [GuildIntegration]
     * @param data The data supplied from Discord
     */
    constructor(client, data) {
        super(data.id);
        this.guildID = data.guildID;
        this.client = client;
        this.patch(data);
    }
    patch(data) {
        super.patch(data);
        if (data.expire_grace_period !== undefined)
            this.expireGracePeriod = data.expire_grace_period;
        if (data.expire_behavior !== undefined)
            this.behaviour = data.expire_behavior === 0 ? 'role' : 'kick';
        if (data.subscriber_count !== undefined)
            this.subscribers = data.subscriber_count;
        if (data.enable_emoticons !== undefined)
            this.enableEmoticons = data.enable_emoticons;
        if (data.synced_at !== undefined)
            this.lastSyncAt = new Date(data.synced_at);
        if (data.role_id !== undefined)
            this.roleID = data.role_id;
        if (data.revoked !== undefined)
            this.revoked = data.revoked;
        if (data.syncing !== undefined)
            this.syncing = data.syncing;
        if (data.user !== undefined) {
            this.userID = data.user.id;
            this.user = this.client.users.add(new User_1.User(this.client, data.user));
        }
        this.account = data.account;
        this.enabled = data.enabled;
        this.type = data.type;
        this.name = data.name;
    }
    toString() {
        return `[wumpcord.GuildIntegration<${this.type}> (${this.name})]`;
    }
}
exports.default = GuildIntegration;
