"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Permissions_1 = __importDefault(require("../../util/Permissions"));
const Base_1 = __importDefault(require("../Base"));
class GuildRole extends Base_1.default {
    /**
     * Creates a new [GuildRole] instance
     * @param client The [WebSocketClient] attached to this [GuildRole]
     * @param data The data supplied from Discord
     */
    constructor(client, data) {
        super(data.id);
        this.guildID = data.guild_id;
        this.client = client;
        this.patch(data);
    }
    patch(data) {
        if (data.permissions !== undefined)
            this.permissions = new Permissions_1.default(data.permissions);
        if (data.mentionable !== undefined)
            this.mentionable = data.mentionable;
        if (data.position !== undefined)
            this.position = data.position;
        if (data.managed !== undefined)
            this.managed = data.managed;
        if (data.hoist !== undefined)
            this.hoisted = data.hoist;
        if (data.color !== undefined)
            this.color = data.color;
        if (data.name !== undefined)
            this.name = data.name;
        if (data.tags !== undefined) {
            this.isPremiumRole = data.tags.premium_subscriber !== undefined;
            if (data.tags.integration_id !== undefined)
                this.integrationID = data.tags.integration_id;
            if (data.tags.bot_id !== undefined)
                this.botID = data.tags.bot_id;
        }
        else {
            this.isPremiumRole = false;
        }
    }
    /** Returns a hexadecimal version of this [GuildRole]'s color */
    get hex() {
        return this.color.toString(16);
    }
    /** Returns a RGB value-like color from this [GuildRole]'s color */
    get rgb() {
        if (this.color === 0)
            return [];
        let items = [];
        const result = (/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i).exec(this.hex);
        if (result !== null)
            items.concat([parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]);
        return items;
    }
    /** Returns the guild that this [GuildRole] belongs to */
    get guild() {
        return this.client.guilds.get(this.guildID) || null;
    }
    toString() {
        return `[wumpcord.GuildRole<N: ${this.name}${this.guild ? `, G: ${this.guild.name}` : ''}]`;
    }
}
exports.default = GuildRole;
