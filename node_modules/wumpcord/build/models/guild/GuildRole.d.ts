/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type WebSocketClient from '../../gateway/WebSocketClient';
import type { APIRole } from 'discord-api-types';
import Permission from '../../util/Permissions';
import Base from '../Base';
interface DiscordRole extends APIRole {
    guild_id: string;
}
export default class GuildRole extends Base<DiscordRole> {
    /** If the role is a Nitro Booster role. */
    isPremiumRole: boolean;
    /** If the role belongs to a integration, it'll return a Snowflake or `null` if not found */
    integrationID: string | null;
    /** Permissions available for this [GuildRole] */
    permissions: Permission;
    /** If the role is mentionable or not */
    mentionable: boolean;
    /** The sorting position the role is in */
    position: number;
    /** If the role is hoisted or not */
    hoisted: boolean;
    /** If the role is managed by a integration or not */
    managed: boolean;
    /** The guild's ID that this role belongs to */
    guildID: string;
    /** The [WebSocketClient] attached to this [GuildRole] */
    private client;
    /** A bot ID if this [GuildRole] is a bot integration role, it'll return `null` if not. */
    botID: string | null;
    /** The color of the role, returns `0` if it's the default */
    color: number;
    /** The name of the role */
    name: string;
    /**
     * Creates a new [GuildRole] instance
     * @param client The [WebSocketClient] attached to this [GuildRole]
     * @param data The data supplied from Discord
     */
    constructor(client: WebSocketClient, data: DiscordRole);
    patch(data: Partial<DiscordRole>): void;
    /** Returns a hexadecimal version of this [GuildRole]'s color */
    get hex(): string;
    /** Returns a RGB value-like color from this [GuildRole]'s color */
    get rgb(): [r?: number, g?: number, b?: number];
    /** Returns the guild that this [GuildRole] belongs to */
    get guild(): import("..").Guild | null;
    toString(): string;
}
export {};
