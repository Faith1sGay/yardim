"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../../Constants");
const GuildEmoji_1 = __importDefault(require("./GuildEmoji"));
const Base_1 = __importDefault(require("../Base"));
class GuildPreview extends Base_1.default {
    /**
     * Creates a new [GuildPreview] instance
     * @param data The data from Discord
     */
    constructor(client, data) {
        super(data.id);
        this.client = client;
        this.patch(data);
    }
    patch(data) {
        super.patch(data);
        this.approximatePresenceCount = data.approximate_presence_count;
        this.approximateMemberCount = data.approximate_member_count;
        this.discoverySplash = data.discovery_splash;
        this.features = data.features;
        this.emojis = data.emojis.map(emote => new GuildEmoji_1.default(this.client, emote));
        this.icon = data.icon;
        this.name = data.name;
    }
    get discoverySplashUrl() {
        if (this.discoverySplash === null)
            return null;
        return `${Constants_1.CDNUrl}/discovery-splashes/${this.id}/${this.discoverySplash}`;
    }
    get splashUrl() {
        return this.splash ? `${Constants_1.CDNUrl}/splashes/${this.id}/${this.splash}` : null;
    }
    toString() {
        return `[wumpcord.GuildPreview<G: ${this.name}>]`;
    }
}
exports.default = GuildPreview;
