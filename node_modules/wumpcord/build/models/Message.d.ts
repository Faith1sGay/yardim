/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type { AnyGuildTextableChannel, MessageContentOptions } from '../types';
import type WebSocketClient from '../gateway/WebSocketClient';
import { GuildEmoji, GuildMember } from '.';
import { Attachment } from './Attachment';
import { User } from './User';
import Base from './Base';
import { APIEmbed, APIMessage, APIMessageReference, APIReaction, APIMessageActivity, APIMessageApplication } from 'discord-api-types';
declare type EditedMessageContent = string | Omit<MessageContentOptions, 'file'>;
declare type ReplyMessageContent = string | Omit<MessageContentOptions, 'reply'>;
interface GetReactionsOptions {
    before?: string;
    after?: string;
    limit?: number;
}
export declare class Message<C extends AnyGuildTextableChannel = AnyGuildTextableChannel> extends Base<APIMessage> {
    referencedMessage: Message | null;
    editedTimestamp: Date | null;
    mentionEveryone: boolean;
    mentionChannels: string[];
    mentionRoles: string[];
    application: APIMessageApplication;
    attachments: Attachment[];
    reactions: APIReaction[];
    reference: APIMessageReference;
    channelID: string;
    timestamp: Date;
    webhookID: string;
    mentions: string[];
    activity: APIMessageActivity;
    content: string;
    guildID: string;
    private client;
    member: GuildMember;
    embeds: APIEmbed[];
    pinned: boolean;
    author: User;
    flags: number;
    edits: Message[];
    type: number;
    tts: boolean;
    constructor(client: WebSocketClient, data: APIMessage);
    patch(data: APIMessage): void;
    get edited(): Message<AnyGuildTextableChannel>;
    get guild(): import("./Guild").Guild | null;
    get channel(): C | null;
    delete(): Promise<void>;
    crosspost(): Promise<Message<AnyGuildTextableChannel>>;
    react(reaction: string | GuildEmoji): Promise<void>;
    unreact(reaction: string | GuildEmoji): Promise<void>;
    getReactions(reaction: string | GuildEmoji, opts?: GetReactionsOptions): Promise<User[]>;
    deleteReactions(): Promise<void>;
    edit(content: EditedMessageContent, options?: Omit<MessageContentOptions, 'file'>): Promise<Message<AnyGuildTextableChannel>>;
    reply(content: ReplyMessageContent, options?: Omit<MessageContentOptions, 'reply'>): Promise<Message<AnyGuildTextableChannel>>;
    pin(): Promise<void>;
    unpin(): Promise<void>;
}
export {};
