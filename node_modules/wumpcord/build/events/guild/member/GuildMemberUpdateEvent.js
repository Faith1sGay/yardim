"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const models_1 = require("../../../models");
const Event_1 = __importDefault(require("../../Event"));
class GuildMemberUpdateEvent extends Event_1.default {
    get member() {
        return this.$refs.updated;
    }
    get old() {
        return this.$refs.old;
    }
    process() {
        const guild = this.client.guilds.get(this.data.guild_id) ?? { id: this.data.guild_id };
        if (guild instanceof models_1.Guild) {
            if (this.data.user === undefined) {
                this.$refs = { old: null, updated: new models_1.GuildMember(this.client, this.data) };
                return;
            }
            const member = guild.members.get(this.data.user.id) ?? { id: this.data.user.id };
            let old = member;
            if (member instanceof models_1.GuildMember) {
                member.patch(this.data);
                guild.members.cache.set(member.user.id, member);
                this.$refs = { old, updated: member };
                return;
            }
        }
        this.$refs = {
            updated: new models_1.GuildMember(this.client, this.data),
            old: this.data.user !== undefined ? { id: this.data.user.id } : null
        };
    }
}
exports.default = GuildMemberUpdateEvent;
