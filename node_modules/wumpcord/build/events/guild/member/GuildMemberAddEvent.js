"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const models_1 = require("../../../models");
const Event_1 = __importDefault(require("../../Event"));
class GuildMemberAddEvent extends Event_1.default {
    /**
     * Getter if the member hasn't passed the **Member Screening** panel. Use
     * a timeout (`setTimeout`) to check if `pending` is now the value you want.
     *
     * Useful for Autoroles and such.
     */
    get pending() {
        return this.$refs.member.pending;
    }
    /**
     * Returns the reference for the member that joined the guild.
     */
    get member() {
        return this.$refs.member;
    }
    /**
     * Returns a partial or a full guild, a partial guild only contains a object as
     * `{ id: String }` while a full guild has all metadata, this is purely based
     * on cache.
     */
    get guild() {
        return this.$refs.guild;
    }
    process() {
        const guild = this.client.guilds.get(this.data.guild_id) ?? { id: this.data.guild_id };
        const member = new models_1.GuildMember(this.client, this.data);
        if (guild instanceof models_1.Guild)
            guild.members.add(member);
        this.$refs = { guild, member };
    }
}
exports.default = GuildMemberAddEvent;
