/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type { GatewayChannelUpdateDispatchData } from 'discord-api-types';
import type { AnyChannel, PartialEntity } from '../../types';
import Event from '../Event';
interface ChannelUpdateRefs {
    old: PartialEntity<AnyChannel> | null;
    new: AnyChannel;
}
export default class ChannelUpdateEvent extends Event<GatewayChannelUpdateDispatchData, ChannelUpdateRefs> {
    get old(): (Partial<import("../../models").TextChannel> & {
        id: string;
    }) | (Partial<import("../../models").NewsChannel> & {
        id: string;
    }) | (Partial<import("../../models").StoreChannel> & {
        id: string;
    }) | (Partial<import("../../models").GroupChannel> & {
        id: string;
    }) | (Partial<import("../../models").DMChannel> & {
        id: string;
    }) | (Partial<import("../../models").VoiceChannel> & {
        id: string;
    }) | (Partial<import("../../models").CategoryChannel> & {
        id: string;
    }) | null;
    get channel(): AnyChannel;
    process(): void;
}
export {};
