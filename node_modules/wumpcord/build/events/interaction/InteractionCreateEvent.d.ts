/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type { GatewayInteractionCreateDispatchData } from 'discord-api-types';
import type { AnyGuildTextableChannel } from '../../types';
import { Guild, GuildMember, Message } from '../../models';
import type ApplicationCommand from '../../interactions/Command';
import Event from '../Event';
interface InteractionCreateRefs {
    command?: ApplicationCommand;
    message?: Message;
    channel: AnyGuildTextableChannel;
    guild: Guild;
}
export default class InteractionCreateEvent extends Event<GatewayInteractionCreateDispatchData, InteractionCreateRefs> {
    get member(): GuildMember;
    get command(): ApplicationCommand | undefined;
    get token(): string;
    get channel(): AnyGuildTextableChannel;
    get guild(): Guild;
    get message(): Message<AnyGuildTextableChannel> | undefined;
    _format(): {
        roleMentions: string[];
        userMentions: string[];
        content: string;
    };
    process(): Promise<void>;
}
export {};
