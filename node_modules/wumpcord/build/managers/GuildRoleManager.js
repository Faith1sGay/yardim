"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const DiscordRestError_1 = __importDefault(require("../errors/DiscordRestError"));
const BaseManager_1 = __importDefault(require("./BaseManager"));
const GuildRole_1 = __importDefault(require("../models/guild/GuildRole"));
class GuildRoleManager extends BaseManager_1.default {
    constructor(client) {
        super(client, GuildRole_1.default);
    }
    fetch(guildID, roleID) {
        return this.client.rest.dispatch({
            endpoint: `/guilds/${guildID}/roles`,
            method: 'GET'
        }).then(data => {
            const role = data.find(role => role.id === roleID);
            if (!role)
                throw new DiscordRestError_1.default(404, `Role "${roleID}" was not found in guild "${guildID}"`);
            return this.add(new GuildRole_1.default(this.client, { guild_id: guildID, ...role })); // eslint-disable-line camelcase
        });
    }
}
exports.default = GuildRoleManager;
