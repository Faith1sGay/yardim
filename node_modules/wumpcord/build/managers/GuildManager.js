"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const UnavailableGuild_1 = __importDefault(require("../models/guild/UnavailableGuild"));
const BaseManager_1 = __importDefault(require("./BaseManager"));
const models_1 = require("../models");
class GuildManager extends BaseManager_1.default {
    constructor(client) {
        super(client, models_1.Guild);
    }
    fetch(id) {
        return this.client.rest.dispatch({
            endpoint: `/guilds/${id}`,
            method: 'GET'
        }).then(data => {
            const shard = this.client.shards.filter(shard => shard.guilds.has(data.id));
            let shardID = 0;
            if (shard.length > 0)
                shardID = shard[0].id;
            if (data.unavailable !== undefined && data.unavailable === true)
                return this.add(new UnavailableGuild_1.default({
                    shard_id: shardID,
                    unavailable: true,
                    id: data.id
                }));
            return this.add(new models_1.Guild(this.client, { shard_id: shardID, ...data })); // eslint-disable-line camelcase
        });
    }
}
exports.default = GuildManager;
