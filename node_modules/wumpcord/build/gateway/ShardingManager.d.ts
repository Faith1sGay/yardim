/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type WebSocketClient from './WebSocketClient';
import type * as types from '../types';
import { Collection } from '@augu/collections';
import WebSocketShard from './WebSocketShard';
export default class ShardManager extends Collection<number, WebSocketShard> {
    /** Reference for creating a [WebSocketShard] */
    private client;
    constructor(client: WebSocketClient);
    /**
     * Returns the avg. ping of all shards
     */
    get ping(): number;
    toString(): string;
    /**
     * Spawns a new shard
     * @param id The ID
     * @param strategy The serialization strategy
     */
    spawn(id: number, strategy: types.ClientOptions['strategy']): Promise<void>;
    /**
     * Connects a shard to Discord
     * @param id The shard's ID
     */
    connect(id: number): Promise<void> | undefined;
    /**
     * Disposes a shard
     * @param id The shard's ID
     */
    dispose(id: number): void;
}
