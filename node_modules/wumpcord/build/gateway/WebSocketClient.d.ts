/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import { Guild, SelfUser } from '../models';
import type * as discord from 'discord-api-types/v8';
import InteractionHelper from '../interactions/Helper';
import type * as types from '../types';
import ShardManager from './ShardingManager';
import RestClient from '../rest/RestClient';
import EventBus from '../util/EventBus';
import ChannelManager from '../managers/ChannelManager';
import GuildManager from '../managers/GuildManager';
import UserManager from '../managers/UserManager';
import type * as events from '../events';
interface WebSocketClientEvents extends EntityEvents {
    shardClose(id: number, error: Error, recoverable: boolean): void;
    shardError(id: number, error: Error): void;
    shardDisconnect(id: number): void;
    shardSpawn(id: number): void;
    shardReady(id: number, unavailable?: Set<string>): void;
    restCall(props: types.RestCallProperties): void;
    restUnavailable(): void;
    restEmpty(): void;
    debug(message: string): void;
    error(error: Error): void;
    ready(unavailable?: Set<string>): void;
}
interface EntityEvents {
    guildRoleCreate(event: events.GuildRoleCreateEvent): void;
    guildRoleDelete(event: events.GuildRoleDeleteEvent): void;
    guildRoleUpdate(event: events.GuildRoleUpdateEvent): void;
    guildMembersChunk(event: events.GuildMemberChunkEvent): void;
    guildMemberUpdate(event: events.GuildMemberUpdateEvent): void;
    guildMemberRemove(event: events.GuildMemberRemoveEvent): void;
    guildMemberAdd(event: events.GuildMemberAddEvent): void;
    guildBanRemove(event: events.GuildBanRemoveEvent): void;
    guildBanAdd(event: events.GuildBanAddEvent): void;
    guildIntegrationsUpdate(event: events.GuildIntegrationsUpdateEvent): void;
    guildEmojisUpdate(event: events.GuildEmojisUpdateEvent): void;
    guildUnavailable(guild: types.PartialEntity<Guild>): void;
    guildAvailable(guild: Guild): void;
    guildDelete(event: events.GuildDeleteEvent): void;
    guildUpdate(event: events.GuildUpdateEvent): void;
    guildCreate(event: events.GuildCreateEvent): void;
    channelPinsUpdate(event: events.ChannelPinsUpdateEvent): void;
    channelUpdate(event: events.ChannelUpdateEvent): void;
    channelDelete(event: events.ChannelDeleteEvent): void;
    channelCreate(event: events.ChannelCreateEvent): void;
    inviteCreate(event: events.InviteCreateEvent): void;
    inviteDelete(event: events.InviteDeleteEvent): void;
    messageReactionRemoveEmoji(event: events.MessageReactionRemoveEmojiEvent): void;
    messageReactionRemoveAll(event: events.MessageReactionRemoveAllEvent): void;
    messageReactionRemove(event: events.MessageReactionRemoveEvent): void;
    messageReactionAdd(event: events.MessageReactionAddEvent): void;
    messageUpdate(event: events.MessageUpdateEvent): void;
    messageDelete(event: events.MessageDeleteEvent): void;
    message(event: events.MessageCreateEvent): void;
    interactionReceive(event: events.InteractionCreateEvent): void;
    voiceServerUpdate(event: events.VoiceServerUpdateEvent): void;
    voiceStateUpdate(event: events.VoiceStateUpdateEvent): void;
    webhooksUpdate(event: events.WebhooksUpdateEvent): void;
    presenceUpdate(event: events.PresenceUpdateEvent): void;
    typingStart(event: events.TypingStartEvent): void;
    userUpdate(event: events.UserUpdateEvent): void;
    raw(type: string, data: object): void;
}
/**
 * Handles everything related to Discord and is the entrypoint to your Discord bot.
 */
export default class WebSocketClient extends EventBus<WebSocketClientEvents> {
    /** List of voice connections available to the client */
    voiceConnections: any;
    /** The interactions helper, this will return `null` if it's not enabled */
    interactions: InteractionHelper | null;
    /** The gateway URL to connect all shards to */
    gatewayURL: string;
    /** The channel cache available, this will be a empty Collection if not enabled. */
    channels: ChannelManager;
    /** The client options available to this WebSocket client. */
    options: types.ClientOptions;
    /** The guild cache available, this will be a empty Collection if not enabled. */
    guilds: GuildManager;
    /** The shard manager available to this context. */
    shards: ShardManager;
    /** If we are ready to be used or not. */
    ready: boolean;
    /** The client's token, this is hidden by default. */
    token: string;
    /** The user cache if available, this will be a empty Collection if not enabled. */
    users: UserManager;
    /** The rest client for creating requests to Discord's REST API. */
    rest: RestClient;
    /** The self user instance */
    user: SelfUser;
    /**
     * Handles everything related to Discord and is the entrypoint to your Discord bot.
     * @param options The options available to this context
     */
    constructor(options: types.NullableClientOptions);
    debug(title: string, message: string): void;
    /**
     * Connects this [WebSocketClient] to the gateway
     */
    connect(): Promise<void>;
    /**
     * Returns the intents by it's numeric value
     */
    get intents(): number;
    /**
     * Returns the bot's gateway information
     */
    getBotGateway(): Promise<discord.APIGatewayBotInfo>;
    /**
     * Returns the gateway information
     */
    getGateway(): Promise<discord.APIGatewayInfo>;
    /**
     * Returns the shard information
     */
    getShardInfo(): Promise<types.ShardInfo>;
    requestGuildMembers(): Promise<void>;
    disconnect(reconnect?: boolean): void;
    setStatus(status: types.OnlineStatus, options: types.SendActivityOptions): void;
}
export {};
