"use strict";
/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/* eslint-disable camelcase */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Command_1 = __importDefault(require("./Command"));
class InteractionHelper {
    constructor(client) {
        this.client = client;
    }
    getGlobalCommands() {
        return this.client.rest.dispatch({
            endpoint: `/applications/${this.client.user.id}/commands`,
            method: 'GET'
        }).then(commands => commands.map(command => new Command_1.default({ is_guild: false, ...command }))); // eslint-disable-line camelcase
    }
    getGuildCommands(guildID) {
        return this.client.rest.dispatch({
            endpoint: `/applications/${this.client.user.id}/guilds/${guildID}/commands`,
            method: 'GET'
        }).then(commands => commands.map(command => new Command_1.default({ is_guild: true, ...command })) // eslint-disable-line camelcase
        ).catch(error => {
            if (error.message.indexOf('Missing Access') !== -1)
                throw new TypeError('Application must be invited in guild using the "applications.commands" scope.');
            throw error;
        });
    }
    createGuildCommand(guildID, metadata) {
        return this.client.rest.dispatch({
            endpoint: `/applications/${this.client.user.id}/guilds/${guildID}/commands`,
            method: 'POST',
            data: metadata
        }).then(data => {
            const command = new Command_1.default({ is_guild: true, ...data });
            return command;
        });
    }
    createGlobalCommand(metadata) {
        return this.client.rest.dispatch({
            endpoint: `/applications/${this.client.user.id}/commands`,
            method: 'POST',
            data: metadata
        }).then(data => {
            const command = new Command_1.default({ is_guild: false, ...data });
            return command;
        });
    }
    editGlobalCommand(id, metadata) {
        return this.client.rest.dispatch({
            endpoint: `/applications/${this.client.user.id}/commands/${id}`,
            method: 'PATCH',
            data: metadata
        }).then(data => {
            const command = new Command_1.default({ is_guild: false, ...data });
            return command;
        });
    }
    editGuildCommand(guildID, commandID, metadata) {
        return this.client.rest.dispatch({
            endpoint: `/applications/${this.client.user.id}/guilds/${guildID}/commands/${commandID}`,
            method: 'patch',
            data: metadata
        }).then(data => {
            const command = new Command_1.default({ is_guild: true, ...data });
            return command;
        });
    }
    deleteGlobalCommand(id) {
        return this.client.rest.dispatch({
            endpoint: `/applications/${this.client.user.id}/commands/${id}`,
            method: 'delete'
        });
    }
    deleteGuildCommand(guildID, commandID) {
        return this.client.rest.dispatch({
            endpoint: `/applications/${this.client.user.id}/guilds/${guildID}/commands/${commandID}`,
            method: 'delete'
        });
    }
    createInteractionResponse(id, token, type, data) {
        return this.client.rest.dispatch({
            endpoint: `/interactions/${id}/${token}/callback`,
            method: 'post',
            data: {
                type,
                data
            }
        });
    }
    deleteOriginalInteraction(token, type, data) {
        return this.client.rest.dispatch({
            endpoint: `/webhooks/${this.client.user.id}/${token}/messages/@original`,
            method: 'DELETE',
            data: {
                type,
                data
            }
        });
    }
    editOriginalInteraction(token, type, data) {
        return this.client.rest.dispatch({
            endpoint: `/webhooks/${this.client.user.id}/${token}/messages/@original`,
            method: 'PATCH',
            data: {
                type,
                data
            }
        });
    }
}
exports.default = InteractionHelper;
