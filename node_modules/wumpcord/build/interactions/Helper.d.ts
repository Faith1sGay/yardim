/**
 * Copyright (c) 2020-2021 August, Ice
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import type * as interactions from './types';
import type WebSocketClient from '../gateway/WebSocketClient';
import ApplicationCommand from './Command';
export default class InteractionHelper {
    private client;
    constructor(client: WebSocketClient);
    getGlobalCommands(): Promise<ApplicationCommand[]>;
    getGuildCommands(guildID: string): Promise<ApplicationCommand[]>;
    createGuildCommand(guildID: string, metadata: interactions.IApplicationCommand): Promise<ApplicationCommand>;
    createGlobalCommand(metadata: interactions.IApplicationCommand): Promise<ApplicationCommand>;
    editGlobalCommand(id: string, metadata: Partial<interactions.IApplicationCommand>): Promise<ApplicationCommand>;
    editGuildCommand(guildID: string, commandID: string, metadata: Partial<interactions.IApplicationCommand>): Promise<ApplicationCommand>;
    deleteGlobalCommand(id: string): Promise<void>;
    deleteGuildCommand(guildID: string, commandID: string): Promise<void>;
    createInteractionResponse(id: string, token: string, type: number, data?: any): Promise<unknown>;
    deleteOriginalInteraction(token: string, type: number, data?: any): Promise<unknown>;
    editOriginalInteraction(token: string, type: number, data?: any): Promise<unknown>;
}
